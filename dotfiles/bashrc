# These are normally to be appended to the bashrc.

# Make terminal useable
set -o vi

# Get date in YYYY-MM-DD form.
D() {
    date +"%Y-%m-%d"
}

# Shorter alias for opening things using the default GUI application.
alias s='xdg-open'

# Find a file by name or regex and vim into it.
fvim() {
    find . -name "$1" -exec vim {} \;
}

# Enable forward-i-search by disabling flow control
stty -ixon

alias fp='readlink -f '
export PATH=$PATH:/home/hq6/Research/A/arachne-sosp2017/scripts
export PATH=$PATH:/home/hq6/Research/A/CacheTools
export PATH=$PATH:/home/hq6/Research/A/CacheTools/PerfUtils/scripts

# Make visual editing useable
export EDITOR=/usr/bin/vim
export VISUAL=/usr/bin/vim

# Sometimes we want to sudo while preserving our own PATH.
alias psudo='sudo env "PATH=$PATH" '

# Mostly for laptops, this is a nice convenience.
alias battery=acpi

# Aliases for when one wants to try typing without echo.
alias a='stty echo && clear'
alias d='stty -echo && clear'
alias ta='tmux at'

################################################################################
# A tool for managing fixed-time work sessions.
function countdown(){
    date1=$((`date +%s` + $1));
    while [ "$date1" -ge `date +%s` ]; do
        echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
        sleep 1
    done
}

# Give a time in minutes and get a notification after that much time.
# Latest iteration.
b() {
    if [[ $#  -lt 1 ]]; then
       return
    fi
    msg='Time to take a break!'
    seconds=$(( 60 * $1 ))
    ( sleep $seconds && notify-send -u critical 'Work Session End' "$msg" && wall <<<"$msg" &
      echo $! >> /tmp/count_down_pid
    )
    countdown $seconds
}

e() {
  if [[ -e "/tmp/count_down_pid" ]]; then
    kill $(cat /tmp/count_down_pid) 2> /dev/null
    rm /tmp/count_down_pid
  fi
}
################################################################################
# Robust function for calculating minimum and maximum of a column; ignores
# non-numeric data in a column.
# First argument is file name, second argument is column number.
minMaxColumn() {
python - <<END
minValue = None
maxValue = None
with open("$1") as f:
  for line in f:
    try:
      parts = line.strip().split(",")
      # Be consistent with 1-based numbering
      number = float(parts[$2 - 1])
      if not minValue:
          minValue = number
          maxValue = number
      minValue = min(number, minValue)
      maxValue = max(number, maxValue)
    except:
      # Skip over non-floats
      pass
print minValue, maxValue
END
}
################################################################################

source ~/.vimsets/comments.vim
source ~/.vimsets/C.vim
source ~/.vimsets/functions.vim

syntax on
set shiftwidth=4
set tabstop=4
set nohlsearch
set expandtab
set timeout timeoutlen=300
set nowarn
set display+=lastline
set cinkeys-=0#
set indentkeys-=0#

nnoremap <F5> "=strftime("%c")<CR>P
inoremap <F5> <C-R>=strftime("%c")<CR>
inoremap <F4> <C-R>=strftime("%F")<CR>

" Insert time without leading space or zero
function! Trim(input_string)
    return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction
inoremap <F3> <C-R>=Trim(strftime("%l:%M"))<CR>

highlight Comment ctermfg=6
"match ErrorMsg '\%>100v.\+'

au BufNew,BufRead *.txt set et
au BufNew,BufRead *.py set et
au BufNew,BufRead Makefile set noet

au BufNew,BufRead *.ans source ~/.vimsets/apdl.vim

set wildignore=*.class,*.pdf
set tabpagemax=50
set splitright
set autochdir
set autoindent
set hidden

" Formating for numbered lsits
set formatoptions=tcq
set comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-,fb:\d\+.
set autoindent
set fo+=n

set statusline+=%F
set laststatus=3
set tags=tags;/

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======
exec "set listchars=tab:\\ \\ ,trail:\uB7,nbsp:~"
set list

" Prevent vim from jumping when we scroll off-screen.
set sidescroll=1

" Insert timestamp
nnoremap <F5> "=strftime("%c")<CR>P
inoremap <F5> <C-R>=strftime("%c")<CR>

" Insert date
inoremap <F4> <C-R>=strftime("%F")<CR>

highlight Comment ctermfg=6

autocmd BufNewFile,BufReadPre,FilterReadPre,FileReadPre * setf Note
autocmd BufNew,BufRead *.h,*.c,*.cc,*.cpp,*.java set cindent
autocmd BufNew,BufRead *.txt set et
autocmd BufNew,BufRead *.py set et
autocmd BufNew,BufRead Makefile set noet
autocmd BufNew,BufRead *.ans source ~/.vimsets/apdl.vim
autocmd BufNew,BufRead *.txt set noet
autocmd BufNew,BufRead *.py set et
autocmd BufRead *.log set nowrap
autocmd BufNewFile,BufRead * setlocal formatoptions+=tcqn
autocmd Filetype c,cpp,cc set comments^=:///

" Create directories on demand.
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

command GTodo noautocmd vimgrep /TODO\|FIXME/j ** | cw
command Todo noautocmd vimgrep /TODO\|FIXME/j % | cw

" Convert terms_with_underscores to camelCase.
command Cam s#_\(\l\)#\u\1#g
command Pa set paste
command Np set nopaste
command Fp echo expand('%:p')

" Remove trailing space
command Rts %s!\s\+$!!

" Show the full path of the file.
map ,f :echo expand('%:p')<CR>

" Evaluate expressions within a line.
map ,c :s/.*/\=eval(submatch(0))<CR>

" Remove trailing space
map ,s :%s/\s\+$//

" Change zz to scroll file until cursor is 25% from the top of the file.
nnoremap zz :call ScrollToPercent(25)<CR>

" Better color scheme for vimdiff.
if &diff
   syntax off
   highlight DiffAdd cterm=NONE  ctermbg=Yellow
   highlight DiffDelete cterm=NONE  ctermbg=Red 
   highlight DiffChange cterm=NONE  ctermbg=NONE
   highlight DiffText cterm=NONE  ctermbg=Yellow
endif

" Custom highlight groups for match and 2match commands.
highlight Red  term=standout ctermfg=1 guifg=Red
highlight Green  term=bold ctermfg=2 gui=bold guifg=SeaGreen
highlight Blue guifg=Blue ctermfg=Cyan
highlight S term=reverse ctermfg=0 ctermbg=3 guibg=Cyan

" Move visually text vertically up and down, replacing text if it was there.
" This has the advantage of simplicity, but the disadvantage that it leaves
" space characters on empty lines.
vmap <C-j> ygvr jR<C-r>"`[v`]h
vmap <C-k> ygvr kR<C-r>"`[v`]h


" Make the status line more useful.
" set laststatus=2
set statusline=%f         " Path to the file
set statusline+=%=        " Switch to the right side
set statusline+=%l        " Current line
set statusline+=/         " Separator
set statusline+=%L        " Total lines

" Toggle background between light and dark
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark")<CR>

" Clean up trailing whitespace globally
map ,s :%s/\s\+$//g

" Prevent vim from jumping when we scroll off-screen.
set sidescroll=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimwiki related mappings
" Setting options to allow vimwiki to work at all.
set nocompatible
filetype plugin on
syntax on

let mapleader = ","
map <Leader>gg <Plug>VimwikiToggleListItem

" Change a block of text into Vimwiki preformatted text.
vnoremap <Leader>ff <esc>`<O{{{sh<esc>`>o}}}<esc>


" Wrapping causes ugliness when Vimwiki shortens links
autocmd FileType wiki setlocal nowrap

" Conceal preformatted text markers.
let g:vimwiki_conceal_pre = 1
let g:vimwiki_key_mappings = {'table_format': 0}
